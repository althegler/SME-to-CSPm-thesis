Automatically generated by Mendeley Desktop 1.17.13
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Floyd1967,
author = {Floyd, Robert W.},
doi = {10.1007/978-94-011-1793-7_4},
file = {:home/albt/Dropbox/diku/thesis/articles{\_}and{\_}books/Assigning meanings to programs.pdf:pdf},
isbn = {0821813196},
issn = {01460404},
pages = {19--32},
pmid = {17389487},
title = {{Assigning Meanings to Programs}},
url = {http://www.springerlink.com/index/10.1007/978-94-011-1793-7{\_}4},
year = {1967}
}
@article{Pedersen2018,
author = {Pedersen, Jan B. and Welch, Peter H.},
doi = {10.1007/s00165-017-0447-x},
issn = {0934-5043},
journal = {Formal Aspects of Computing},
keywords = {CSP,Concurrency,Deadlock,Event ordering,Liveness,Occam-pi,Verification,proxwaa-orientation},
number = {2},
pages = {239--277},
publisher = {Springer London},
title = {{The symbiosis of concurrency and verification: teaching and case studies}},
url = {http://link.springer.com/10.1007/s00165-017-0447-x},
volume = {30},
year = {2018}
}
@article{Lamport1984,
abstract = {Generalized Hoare Logic is a formal logical system for deriving invariance properties of programs. It provides a uniform way to describe a variety of methods for reasoning about concurrent programs, including noninterference, satisfaction, and cooperation proofs. We describe a simple recta-rule of the Generalized Hoare Logic -the Decomposition Principle- and show how all these methods can be derived using it.},
author = {Lamport, Leslie and Schneider, Fred B},
keywords = {Generalized Hoare Logic,Invariance,communicating sequential processes,decomposition principle,messagepassing,noninterference,safety properties},
number = {2},
pages = {281--296},
title = {{The " Hoare Logic " of CSP , and All That}},
volume = {6},
year = {1984}
}
@article{Ben-ari2010,
author = {Ben-ari, Mordechai Moti},
number = {1},
pages = {40--47},
title = {{A Primer on Model Checking}},
volume = {1},
year = {2010}
}
@article{Holzmann1997,
abstract = {SPIN is an efficient verification system for models of distributed software systems. It has been used to detect design errors in applications ranging from high-level descriptions of distributed algorithms to detailed code for controlling telephone exchanges. This paper gives an overview of the design and structure of the verifier, reviews its theoretical foundation, and gives an overview of significant practical applications.},
author = {Holzmann, Gerard J},
keywords = {Formal methods,concurrency.,design verification,distributed systems,model checking,program verification},
number = {5},
pages = {279--295},
title = {{The Model Checker SPIN}},
volume = {23},
year = {1997}
}
@article{Vinter2015,
abstract = {In this work we present a new design and implementation of the Syn- chronous Message Exchange model. The new version uses explicit busses, which may include multiple fields, and where a components may use a bus for both reading and writing, whereas the original version allowed only reading from or writing to a bus, which triggered a need for some busses to exist in two versions for different direc- tions. In addition to the new and improved bus-model, the new SME version also pro- duces traces that may be used for validating a later VHDL implementation of the de- signed component, and can produce a graphical representation of a design to help with debugging.},
author = {Vinter, Brian and Skovhede, Kenneth},
keywords = {FPGA,PyCSP,Scientific Byte Code,Synchronous Messaging},
number = {August},
title = {{Bus Centric Synchronous Message Exchange for Hardware Designs}},
year = {2015}
}
@article{Vinter2014,
abstract = {In our 2013 paper, we introduced the idea of modeling hardware with PyCSP. Encouraged by our initial success we started a masters project where two students continued our work towards a fully detailed processor built in PyCSP. The two students succeeded, but also identified a number of reasons why PyCSP is not well suited for modeling hardware. Their conclusion was that since the hardware is synchronous, communication is frequently based on broadcast and external choice is never used. This means that PyCSP does not provide the mechanisms that are needed, and the strength of PyCSP is never utilized. In this work we introduce a new mes- saging framework, Synchronous Message Exchange, SME, which greatly simplifies hardware modeling, and is also easily used for other strictly synchronous applications, such as a subset of computer games. We describe the SME framework, and show how it has a rather simple equivalence in CSP so that the properties that are associated with CSP based applications are maintained, except rendezvous message exchange.},
author = {Vinter, B and Skovhede, K},
journal = {Communicating Process Architectures},
keywords = {FPGA,PyCSP,scientific byte code,synchronous messaging},
number = {August},
pages = {13},
title = {{Synchronous message exchange for hardware designs}},
year = {2014}
}
@article{Skovhedea,
abstract = {This paper introduces a multi-language simulation and code generation capability for programs written with Synchronous Message Exchange. We show how to use Synchronous Message Exchange to build and verify process-oriented networks that can be translated into C++ and VHDL. This approach gives the developer freedom in choosing the optimal implemen- tation, and enables experimentations with hardware/software co-design. The emitted C++ can also be used to simulate the FPGA implementation inside software, thus enabling a faster development and debugging workflow. We describe the translation process and evaluate the performance of the generated code.},
author = {Skovhede, Kenneth and Vinter, Brian},
pages = {8},
title = {{C ++ support for better hardware / software co-design in C {\#} with SME}}
}
@article{Vinter2016,
abstract = {The Synchronous Message Exchange, SME, is a programming model that both resembles communication in hardware, and can be implemented as a CSP net- work. This paper extends on previous work for modeling hardware-like programs us- ing SME in Python, with the addition of a source-to-source compiler that converts an SME network implemented in Python to an equivalent implementation in VHDL. We describe the challenges, constraints, and solutions involved in translating a highly dynamic language like Python into the hardware-like VHDL language. We also show how the approach can assist in further VHDL refinement by generating tedious test bench code, such that VHDL designs can be simulated and verified with vendor sup- plied simulation and synthesis tools.},
author = {Vinter, Brian and Skovhede, Kenneth},
keywords = {CSP,FPGA,HLS,Haskell,Python,VHDL,synchronous messaging,transpiler},
number = {September},
pages = {23},
title = {{VHDL Generation From Python Synchronous Message Exchange Networks}},
year = {2016}
}
@article{Camurati1988,
author = {Camurati, Paolo and Prinetto, Paolo and Torino, Politecnico},
pages = {12},
title = {{Verification of Hardware Correctness :}},
year = {1988}
}
@article{Skovhede,
abstract = {This paper introduces a method for modeling hardware in the C{\#} language , using an abstraction called Synchronous Message Exchange . We describe how Synchronous Message Exchange helps model hardware from a high - level language , and describe the process used in automatically transpiling a subset of C{\#} models into standard VHDL . We evaluate the approach with a set of examples , comprising a memory component , a financial trading algorithm , and AES encryption .},
author = {Skovhede, Kenneth and Vinter, Brian},
pages = {9},
title = {{Building hardware from C{\#} models}},
year = {2016}
}
@misc{Hoare1969,
abstract = {In this paper an attempt is made to explore the logical foundations of computer programming by use of techniques which were first applied in the study of geometry and have later been extended to other branches of mathematics. This involves the elucidation of sets of axioms and rules of inference which can be used in proofs of the properties of computer programs. Examples are given of such axioms and rules, and a formal proof of a simple theorem is displayed. Finally, it is argued that important advantages, both theoretical and practical, may follow from a pursuance of these topics.},
author = {Hoare, C. A. R.},
booktitle = {Communications of the ACM},
doi = {10.1145/363235.363259},
file = {:home/albt/Dropbox/diku/thesis/articles{\_}and{\_}books/An axiomatic basis for computer programming - C.A.R. Hoare.pdf:pdf},
isbn = {0001-0782},
issn = {00010782},
number = {10},
pages = {576--580},
title = {{An axiomatic basis for computer programming}},
url = {http://portal.acm.org/citation.cfm?doid=363235.363259},
volume = {12},
year = {1969}
}
